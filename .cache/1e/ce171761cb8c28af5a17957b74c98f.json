{"id":"node_modules/libsvm-js/src/loadSVM.js","dependencies":[{"name":"/Users/aaryan/Desktop/SVM/package.json","includedInParent":true,"mtime":1594608760493},{"name":"/Users/aaryan/Desktop/SVM/node_modules/libsvm-js/package.json","includedInParent":true,"mtime":1594448175003},{"name":"./util","loc":{"line":4,"column":23},"parent":"/Users/aaryan/Desktop/SVM/node_modules/libsvm-js/src/loadSVM.js","resolved":"/Users/aaryan/Desktop/SVM/node_modules/libsvm-js/src/util.js"}],"generated":{"js":"'use strict';\n\nmodule.exports = function (libsvm) {\n  const util = require('./util');\n\n  /* eslint-disable camelcase */\n  const predict_one = libsvm.cwrap('libsvm_predict_one', 'number', ['number', 'array', 'number']);\n  const predict_one_probability = libsvm.cwrap('libsvm_predict_one_probability', 'number', ['number', 'array', 'number', 'number']);\n  const add_instance = libsvm.cwrap('add_instance', null, ['number', 'array', 'number', 'number', 'number']);\n  const create_svm_nodes = libsvm.cwrap('create_svm_nodes', 'number', ['number', 'number']);\n  const train_problem = libsvm.cwrap('libsvm_train_problem', 'number', ['number', 'string']);\n  const svm_get_nr_sv = libsvm.cwrap('svm_get_nr_sv', 'number', ['number']);\n  const svm_get_nr_class = libsvm.cwrap('svm_get_nr_class', 'number', ['number']);\n  const svm_get_sv_indices = libsvm.cwrap('svm_get_sv_indices', null, ['number', 'number']);\n  const svm_get_labels = libsvm.cwrap('svm_get_labels', null, ['number', 'number']);\n  const svm_free_model = libsvm.cwrap('svm_free_model', null, ['number']);\n  const svm_cross_validation = libsvm.cwrap('libsvm_cross_validation', null, ['number', 'string', 'number', 'number']);\n  const svm_get_svr_probability = libsvm.cwrap('svm_get_svr_probability', null, ['number']);\n  const free_problem = libsvm.cwrap('free_problem', null, ['number']);\n  const serialize_model = libsvm.cwrap('serialize_model', 'number', ['number']);\n  const deserialize_model = libsvm.cwrap('deserialize_model', 'number', ['string']);\n\n  /* eslint-enable camelcase */\n\n  class SVM {\n    /**\n         * @constructor\n         * @param {object} options\n         * @param {number} [options.type=SVM_TYPES.C_SVC] - Type of SVM to perform,\n         * @param {number} [options.kernel=KERNEL_TYPES.RBF] - Kernel function,\n         * @param {number} [options.degree=3] - Degree of polynomial, for polynomial kernel\n         * @param {number} [options.gamma] -  Gamma parameter of the RBF, Polynomial and Sigmoid kernels. Default value is 1/num_features\n         * @param {number} [options.coef0=0] - coef0 parameter for Polynomial and Sigmoid kernels\n         * @param {number} [options.cost=1] - Cost parameter, for C SVC, Epsilon SVR and NU SVR\n         * @param {number} [options.nu=0.5] - For NU SVC and NU SVR\n         * @param {number} [options.epsilon=0.1] - For epsilon SVR\n         * @param {number} [options.cacheSize=100] - Cache size in MB\n         * @param {number} [options.tolerance=0.001] - Tolerance\n         * @param {boolean} [options.shrinking=true] - Use shrinking euristics (faster),\n         * @param {boolean} [options.probabilityEstimates=false] - weather to train SVC/SVR model for probability estimates,\n         * @param {object} [options.weight] - Set weight for each possible class\n         * @param {boolean} [options.quiet=true] - Print info during training if false\n         */\n    constructor(options) {\n      this.options = Object.assign({}, options);\n      this.model = null;\n    }\n\n    /**\n         * Trains the SVM model.\n         * @param {Array<Array<number>>} samples - The training samples. First level of array are the samples, second\n         * level are the individual features\n         * @param {Array<number>} labels - The training labels. It should have the same size as the samples. If you are\n         * training a classification model, the labels should be distinct integers for each class. If you are training\n         * a regression model, each label should be the value of the predicted variable.\n         * @throws if SVM instance was instantiated from SVM.load.\n         */\n    train(samples, labels) {\n      if (this._deserialized) throw new Error('Train cannot be called on instance created with SVM.load');\n      this.free();\n      this.problem = createProblem(samples, labels);\n      const command = this.getCommand(samples);\n      this.model = train_problem(this.problem, command);\n    }\n\n    /**\n         * Performs k-fold cross-validation (KF-CV). KF-CV separates the data-set into kFold random equally sized partitions,\n         * and uses each as a validation set, with all other partitions used in the training set. Observations left over\n         * from if kFold does not divide the number of observations are left out of the cross-validation process. If\n         * kFold is one, this is equivalent to a leave-on-out cross-validation\n         * @param {Array<Array<number>>} samples - The training samples.\n         * @param {Array<number>} labels - The training labels.\n         * @param {number} kFold - Number of datasets into which to split the training set.\n         * @throws if SVM instance was instantiated from SVM.load.\n         * @return {Array<number>} The array of predicted labels produced by the cross validation. Has a size equal to\n         * the number of samples provided as input.\n         */\n    crossValidation(samples, labels, kFold) {\n      if (this._deserialized) throw new Error('crossValidation cannot be called on instance created with SVM.load');\n      const problem = createProblem(samples, labels);\n      const target = libsvm._malloc(labels.length * 8);\n      svm_cross_validation(problem, this.getCommand(samples), kFold, target);\n      const data = libsvm.HEAPF64.subarray(target / 8, target / 8 + labels.length);\n      const arr = Array.from(data);\n      libsvm._free(target);\n      free_problem(problem);\n      return arr;\n    }\n\n    /**\n         * Free the memory allocated for the model. Since this memory is stored in the memory model of emscripten, it is\n         * allocated within an ArrayBuffer and WILL NOT BE GARBARGE COLLECTED, you have to explicitly free it. So\n         * not calling this will result in memory leaks. As of today in the browser, there is no way to hook the\n         * garbage collection of the SVM object to free it automatically.\n         * Free the memory that was created by the compiled libsvm library to.\n         * store the model. This model is reused every time the predict method is called.\n         */\n    free() {\n      if (this.problem) {\n        free_problem(this.problem);\n        this.problem = null;\n      }\n      if (this.model !== null) {\n        svm_free_model(this.model);\n        this.model = null;\n      }\n    }\n\n    getCommand(samples) {\n      const options = {};\n      Object.assign(options, this.options, {\n        gamma: this.options.gamma ? this.options.gamma : 1 / samples[0].length\n      });\n      return util.getCommand(options);\n    }\n\n    /**\n         * Predict the label of one sample.\n         * @param {Array<number>} sample - The sample to predict.\n         * @return {number} - The predicted label.\n         */\n    predictOne(sample) {\n      if (this.model === null) {\n        throw new Error('Cannot predict, you must train first');\n      }\n      return predict_one(this.model, new Uint8Array(new Float64Array(sample).buffer), sample.length);\n    }\n\n    /**\n         * Predict the label of many samples.\n         * @param {Array<Array<number>>} samples - The samples to predict.\n         * @return {Array<number>} - The predicted labels.\n         */\n    predict(samples) {\n      let arr = [];\n      for (let i = 0; i < samples.length; i++) {\n        arr.push(this.predictOne(samples[i]));\n      }\n      return arr;\n    }\n\n    /**\n         * Predict the label with probability estimate of many samples.\n         * @param {Array<Array<number>>} samples - The samples to predict.\n         * @return {Array<object>} - An array of objects containing the prediction label and the probability estimates for each label\n         */\n    predictProbability(samples) {\n      let arr = [];\n      for (let i = 0; i < samples.length; i++) {\n        arr.push(this.predictOneProbability(samples[i]));\n      }\n      return arr;\n    }\n\n    /** Predict the label with probability estimate.\n         * @param {Array<number>} sample\n         * @return {object} - An object containing the prediction label and the probability estimates for each label\n         */\n\n    predictOneProbability(sample) {\n      const labels = this.getLabels();\n      const nbLabels = labels.length;\n      const estimates = libsvm._malloc(nbLabels * 8);\n      const prediction = predict_one_probability(this.model, new Uint8Array(new Float64Array(sample).buffer), sample.length, estimates);\n      const estimatesArr = Array.from(libsvm.HEAPF64.subarray(estimates / 8, estimates / 8 + nbLabels));\n      const result = {\n        prediction,\n        estimates: labels.map((label, idx) => ({\n          label,\n          probability: estimatesArr[idx]\n        }))\n      };\n      libsvm._free(estimates);\n      return result;\n    }\n\n    /** Predict a regression value with a confidence interval\n         * @param {Array<number>} sample\n         * @param {number} confidence - A value between 0 and 1. For example, a value 0.95 will give you the 95% confidence interval of the predicted value.\n         * @return {object} - An object containing the prediction value and the lower and upper bounds of the confidence interval\n         */\n    predictOneInterval(sample, confidence) {\n      const interval = this._getInterval(confidence);\n      const predicted = this.predictOne(sample);\n      return {\n        predicted,\n        interval: [predicted - interval, predicted + interval]\n      };\n    }\n\n    /** Predict regression values with confidence intervals\n         * @param {Array<Array<number>>} samples - An array of samples.\n         * @param {number} confidence - A value between 0 and 1. For example, a value 0.95 will give you the 95% confidence interval of the predicted value.\n         * @return {Array<object>} - An array of objects each containing the prediction label and the probability estimates for each label\n         */\n    predictInterval(samples, confidence) {\n      const interval = this._getInterval(confidence);\n      const predicted = this.predict(samples);\n      return predicted.map((pred) => ({\n        predicted: pred,\n        interval: [pred - interval, pred + interval]\n      }));\n    }\n\n    _getInterval(confidence) {\n      const sigma = svm_get_svr_probability(this.model);\n      if (sigma === 0) throw new Error('the model is not a regression with probability estimates');\n      if (confidence <= 0 || confidence >= 1) throw new Error('confidence must be greater than 0 and less than 1');\n      const p = (1 - confidence) / 2;\n      return sigma * Math.sign(p - 0.5) * Math.log2(1 - 2 * Math.abs(p - 0.5));\n    }\n\n\n    /**\n         * Get the array of labels from the model. Useful when creating an SVM instance with SVM.load\n         * @return {Array<number>} - The list of labels.\n         */\n    getLabels() {\n      const nbLabels = svm_get_nr_class(this.model);\n      return getIntArrayFromModel(svm_get_labels, this.model, nbLabels);\n    }\n\n    /**\n         * Get the indices of the support vectors from the training set passed to the train method.\n         * @return {Array<number>} - The list of indices from the training samples.\n         */\n    getSVIndices() {\n      const nSV = svm_get_nr_sv(this.model);\n      return getIntArrayFromModel(svm_get_sv_indices, this.model, nSV)\n        .map((i) => i - 1);\n    }\n\n    /**\n         * Uses libsvm's serialization method of the model.\n         * @return {string} The serialization string.\n         */\n    serializeModel() {\n      if (!this.model) throw new Error('Cannot serialize model. No model was trained');\n      const result = serialize_model(this.model);\n      const str = libsvm.Pointer_stringify(result);\n      libsvm._free(result);\n      return str;\n    }\n\n    /**\n         * Create a SVM instance from the serialized model.\n         * @param {string} serializedModel - The serialized model.\n         * @return {SVM} - SVM instance that contains the model.\n         */\n    static load(serializedModel) {\n      const svm = new SVM();\n      svm.model = deserialize_model(serializedModel);\n      svm._deserialized = true;\n      return svm;\n    }\n  }\n\n  /**\n     * SVM classification and regression types\n     * @memberof SVM\n     * @type {{C_SVC: string, NU_SVC: string, ONE_CLASS: string, EPSILON_SVR: string, NU_SVR: string}}\n     * @property C_SVC - The C support vector classifier type\n     * @property NU_SVC - The nu support vector classifier type\n     * @property ONE_CLASS - The one-class support vector classifier type\n     * @property EPSILON_SVR - The epsilon support vector regression type\n     * @property NU_SVR - The nu support vector regression type\n     */\n  SVM.SVM_TYPES = {\n    C_SVC: '0', // C support vector classification\n    NU_SVC: '1', // NU support vector classification\n    ONE_CLASS: '2', // ONE CLASS classification\n    EPSILON_SVR: '3', // Epsilon support vector regression\n    NU_SVR: '4' // Nu support vector regression\n  };\n\n\n  /**\n     * SVM kernel types\n     * @memberof SVM\n     * @type {{LINEAR: string, POLYNOMIAL: string, RBF: string, SIGMOID: string}}\n     * @property LINEAR - Linear kernel\n     * @property POLYNOMIAL - Polynomial kernel\n     * @property RBF - Radial basis function (gaussian) kernel\n     * @property SIGMOID - Sigmoid kernel\n     */\n  SVM.KERNEL_TYPES = {\n    LINEAR: '0',\n    POLYNOMIAL: '1',\n    RBF: '2', // Radial basis function\n    SIGMOID: '3',\n    PRECOMPUTED: '4'\n  };\n\n  function getIntArrayFromModel(fn, model, size) {\n    const offset = libsvm._malloc(size * 4);\n    fn(model, offset);\n    const data = libsvm.HEAP32.subarray(offset / 4, offset / 4 + size);\n    const arr = Array.from(data);\n    libsvm._free(offset);\n    return arr;\n  }\n\n  function createProblem(samples, labels) {\n    const nbSamples = samples.length;\n    const nbFeatures = samples[0].length;\n    const problem = create_svm_nodes(nbSamples, nbFeatures);\n    for (let i = 0; i < nbSamples; i++) {\n      add_instance(problem, new Uint8Array(new Float64Array(samples[i]).buffer), nbFeatures, labels[i], i);\n    }\n    return problem;\n  }\n\n  return SVM;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/libsvm-js/src/loadSVM.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}}],"sources":{"node_modules/libsvm-js/src/loadSVM.js":"'use strict';\n\nmodule.exports = function (libsvm) {\n  const util = require('./util');\n\n  /* eslint-disable camelcase */\n  const predict_one = libsvm.cwrap('libsvm_predict_one', 'number', ['number', 'array', 'number']);\n  const predict_one_probability = libsvm.cwrap('libsvm_predict_one_probability', 'number', ['number', 'array', 'number', 'number']);\n  const add_instance = libsvm.cwrap('add_instance', null, ['number', 'array', 'number', 'number', 'number']);\n  const create_svm_nodes = libsvm.cwrap('create_svm_nodes', 'number', ['number', 'number']);\n  const train_problem = libsvm.cwrap('libsvm_train_problem', 'number', ['number', 'string']);\n  const svm_get_nr_sv = libsvm.cwrap('svm_get_nr_sv', 'number', ['number']);\n  const svm_get_nr_class = libsvm.cwrap('svm_get_nr_class', 'number', ['number']);\n  const svm_get_sv_indices = libsvm.cwrap('svm_get_sv_indices', null, ['number', 'number']);\n  const svm_get_labels = libsvm.cwrap('svm_get_labels', null, ['number', 'number']);\n  const svm_free_model = libsvm.cwrap('svm_free_model', null, ['number']);\n  const svm_cross_validation = libsvm.cwrap('libsvm_cross_validation', null, ['number', 'string', 'number', 'number']);\n  const svm_get_svr_probability = libsvm.cwrap('svm_get_svr_probability', null, ['number']);\n  const free_problem = libsvm.cwrap('free_problem', null, ['number']);\n  const serialize_model = libsvm.cwrap('serialize_model', 'number', ['number']);\n  const deserialize_model = libsvm.cwrap('deserialize_model', 'number', ['string']);\n\n  /* eslint-enable camelcase */\n\n  class SVM {\n    /**\n         * @constructor\n         * @param {object} options\n         * @param {number} [options.type=SVM_TYPES.C_SVC] - Type of SVM to perform,\n         * @param {number} [options.kernel=KERNEL_TYPES.RBF] - Kernel function,\n         * @param {number} [options.degree=3] - Degree of polynomial, for polynomial kernel\n         * @param {number} [options.gamma] -  Gamma parameter of the RBF, Polynomial and Sigmoid kernels. Default value is 1/num_features\n         * @param {number} [options.coef0=0] - coef0 parameter for Polynomial and Sigmoid kernels\n         * @param {number} [options.cost=1] - Cost parameter, for C SVC, Epsilon SVR and NU SVR\n         * @param {number} [options.nu=0.5] - For NU SVC and NU SVR\n         * @param {number} [options.epsilon=0.1] - For epsilon SVR\n         * @param {number} [options.cacheSize=100] - Cache size in MB\n         * @param {number} [options.tolerance=0.001] - Tolerance\n         * @param {boolean} [options.shrinking=true] - Use shrinking euristics (faster),\n         * @param {boolean} [options.probabilityEstimates=false] - weather to train SVC/SVR model for probability estimates,\n         * @param {object} [options.weight] - Set weight for each possible class\n         * @param {boolean} [options.quiet=true] - Print info during training if false\n         */\n    constructor(options) {\n      this.options = Object.assign({}, options);\n      this.model = null;\n    }\n\n    /**\n         * Trains the SVM model.\n         * @param {Array<Array<number>>} samples - The training samples. First level of array are the samples, second\n         * level are the individual features\n         * @param {Array<number>} labels - The training labels. It should have the same size as the samples. If you are\n         * training a classification model, the labels should be distinct integers for each class. If you are training\n         * a regression model, each label should be the value of the predicted variable.\n         * @throws if SVM instance was instantiated from SVM.load.\n         */\n    train(samples, labels) {\n      if (this._deserialized) throw new Error('Train cannot be called on instance created with SVM.load');\n      this.free();\n      this.problem = createProblem(samples, labels);\n      const command = this.getCommand(samples);\n      this.model = train_problem(this.problem, command);\n    }\n\n    /**\n         * Performs k-fold cross-validation (KF-CV). KF-CV separates the data-set into kFold random equally sized partitions,\n         * and uses each as a validation set, with all other partitions used in the training set. Observations left over\n         * from if kFold does not divide the number of observations are left out of the cross-validation process. If\n         * kFold is one, this is equivalent to a leave-on-out cross-validation\n         * @param {Array<Array<number>>} samples - The training samples.\n         * @param {Array<number>} labels - The training labels.\n         * @param {number} kFold - Number of datasets into which to split the training set.\n         * @throws if SVM instance was instantiated from SVM.load.\n         * @return {Array<number>} The array of predicted labels produced by the cross validation. Has a size equal to\n         * the number of samples provided as input.\n         */\n    crossValidation(samples, labels, kFold) {\n      if (this._deserialized) throw new Error('crossValidation cannot be called on instance created with SVM.load');\n      const problem = createProblem(samples, labels);\n      const target = libsvm._malloc(labels.length * 8);\n      svm_cross_validation(problem, this.getCommand(samples), kFold, target);\n      const data = libsvm.HEAPF64.subarray(target / 8, target / 8 + labels.length);\n      const arr = Array.from(data);\n      libsvm._free(target);\n      free_problem(problem);\n      return arr;\n    }\n\n    /**\n         * Free the memory allocated for the model. Since this memory is stored in the memory model of emscripten, it is\n         * allocated within an ArrayBuffer and WILL NOT BE GARBARGE COLLECTED, you have to explicitly free it. So\n         * not calling this will result in memory leaks. As of today in the browser, there is no way to hook the\n         * garbage collection of the SVM object to free it automatically.\n         * Free the memory that was created by the compiled libsvm library to.\n         * store the model. This model is reused every time the predict method is called.\n         */\n    free() {\n      if (this.problem) {\n        free_problem(this.problem);\n        this.problem = null;\n      }\n      if (this.model !== null) {\n        svm_free_model(this.model);\n        this.model = null;\n      }\n    }\n\n    getCommand(samples) {\n      const options = {};\n      Object.assign(options, this.options, {\n        gamma: this.options.gamma ? this.options.gamma : 1 / samples[0].length\n      });\n      return util.getCommand(options);\n    }\n\n    /**\n         * Predict the label of one sample.\n         * @param {Array<number>} sample - The sample to predict.\n         * @return {number} - The predicted label.\n         */\n    predictOne(sample) {\n      if (this.model === null) {\n        throw new Error('Cannot predict, you must train first');\n      }\n      return predict_one(this.model, new Uint8Array(new Float64Array(sample).buffer), sample.length);\n    }\n\n    /**\n         * Predict the label of many samples.\n         * @param {Array<Array<number>>} samples - The samples to predict.\n         * @return {Array<number>} - The predicted labels.\n         */\n    predict(samples) {\n      let arr = [];\n      for (let i = 0; i < samples.length; i++) {\n        arr.push(this.predictOne(samples[i]));\n      }\n      return arr;\n    }\n\n    /**\n         * Predict the label with probability estimate of many samples.\n         * @param {Array<Array<number>>} samples - The samples to predict.\n         * @return {Array<object>} - An array of objects containing the prediction label and the probability estimates for each label\n         */\n    predictProbability(samples) {\n      let arr = [];\n      for (let i = 0; i < samples.length; i++) {\n        arr.push(this.predictOneProbability(samples[i]));\n      }\n      return arr;\n    }\n\n    /** Predict the label with probability estimate.\n         * @param {Array<number>} sample\n         * @return {object} - An object containing the prediction label and the probability estimates for each label\n         */\n\n    predictOneProbability(sample) {\n      const labels = this.getLabels();\n      const nbLabels = labels.length;\n      const estimates = libsvm._malloc(nbLabels * 8);\n      const prediction = predict_one_probability(this.model, new Uint8Array(new Float64Array(sample).buffer), sample.length, estimates);\n      const estimatesArr = Array.from(libsvm.HEAPF64.subarray(estimates / 8, estimates / 8 + nbLabels));\n      const result = {\n        prediction,\n        estimates: labels.map((label, idx) => ({\n          label,\n          probability: estimatesArr[idx]\n        }))\n      };\n      libsvm._free(estimates);\n      return result;\n    }\n\n    /** Predict a regression value with a confidence interval\n         * @param {Array<number>} sample\n         * @param {number} confidence - A value between 0 and 1. For example, a value 0.95 will give you the 95% confidence interval of the predicted value.\n         * @return {object} - An object containing the prediction value and the lower and upper bounds of the confidence interval\n         */\n    predictOneInterval(sample, confidence) {\n      const interval = this._getInterval(confidence);\n      const predicted = this.predictOne(sample);\n      return {\n        predicted,\n        interval: [predicted - interval, predicted + interval]\n      };\n    }\n\n    /** Predict regression values with confidence intervals\n         * @param {Array<Array<number>>} samples - An array of samples.\n         * @param {number} confidence - A value between 0 and 1. For example, a value 0.95 will give you the 95% confidence interval of the predicted value.\n         * @return {Array<object>} - An array of objects each containing the prediction label and the probability estimates for each label\n         */\n    predictInterval(samples, confidence) {\n      const interval = this._getInterval(confidence);\n      const predicted = this.predict(samples);\n      return predicted.map((pred) => ({\n        predicted: pred,\n        interval: [pred - interval, pred + interval]\n      }));\n    }\n\n    _getInterval(confidence) {\n      const sigma = svm_get_svr_probability(this.model);\n      if (sigma === 0) throw new Error('the model is not a regression with probability estimates');\n      if (confidence <= 0 || confidence >= 1) throw new Error('confidence must be greater than 0 and less than 1');\n      const p = (1 - confidence) / 2;\n      return sigma * Math.sign(p - 0.5) * Math.log2(1 - 2 * Math.abs(p - 0.5));\n    }\n\n\n    /**\n         * Get the array of labels from the model. Useful when creating an SVM instance with SVM.load\n         * @return {Array<number>} - The list of labels.\n         */\n    getLabels() {\n      const nbLabels = svm_get_nr_class(this.model);\n      return getIntArrayFromModel(svm_get_labels, this.model, nbLabels);\n    }\n\n    /**\n         * Get the indices of the support vectors from the training set passed to the train method.\n         * @return {Array<number>} - The list of indices from the training samples.\n         */\n    getSVIndices() {\n      const nSV = svm_get_nr_sv(this.model);\n      return getIntArrayFromModel(svm_get_sv_indices, this.model, nSV)\n        .map((i) => i - 1);\n    }\n\n    /**\n         * Uses libsvm's serialization method of the model.\n         * @return {string} The serialization string.\n         */\n    serializeModel() {\n      if (!this.model) throw new Error('Cannot serialize model. No model was trained');\n      const result = serialize_model(this.model);\n      const str = libsvm.Pointer_stringify(result);\n      libsvm._free(result);\n      return str;\n    }\n\n    /**\n         * Create a SVM instance from the serialized model.\n         * @param {string} serializedModel - The serialized model.\n         * @return {SVM} - SVM instance that contains the model.\n         */\n    static load(serializedModel) {\n      const svm = new SVM();\n      svm.model = deserialize_model(serializedModel);\n      svm._deserialized = true;\n      return svm;\n    }\n  }\n\n  /**\n     * SVM classification and regression types\n     * @memberof SVM\n     * @type {{C_SVC: string, NU_SVC: string, ONE_CLASS: string, EPSILON_SVR: string, NU_SVR: string}}\n     * @property C_SVC - The C support vector classifier type\n     * @property NU_SVC - The nu support vector classifier type\n     * @property ONE_CLASS - The one-class support vector classifier type\n     * @property EPSILON_SVR - The epsilon support vector regression type\n     * @property NU_SVR - The nu support vector regression type\n     */\n  SVM.SVM_TYPES = {\n    C_SVC: '0', // C support vector classification\n    NU_SVC: '1', // NU support vector classification\n    ONE_CLASS: '2', // ONE CLASS classification\n    EPSILON_SVR: '3', // Epsilon support vector regression\n    NU_SVR: '4' // Nu support vector regression\n  };\n\n\n  /**\n     * SVM kernel types\n     * @memberof SVM\n     * @type {{LINEAR: string, POLYNOMIAL: string, RBF: string, SIGMOID: string}}\n     * @property LINEAR - Linear kernel\n     * @property POLYNOMIAL - Polynomial kernel\n     * @property RBF - Radial basis function (gaussian) kernel\n     * @property SIGMOID - Sigmoid kernel\n     */\n  SVM.KERNEL_TYPES = {\n    LINEAR: '0',\n    POLYNOMIAL: '1',\n    RBF: '2', // Radial basis function\n    SIGMOID: '3',\n    PRECOMPUTED: '4'\n  };\n\n  function getIntArrayFromModel(fn, model, size) {\n    const offset = libsvm._malloc(size * 4);\n    fn(model, offset);\n    const data = libsvm.HEAP32.subarray(offset / 4, offset / 4 + size);\n    const arr = Array.from(data);\n    libsvm._free(offset);\n    return arr;\n  }\n\n  function createProblem(samples, labels) {\n    const nbSamples = samples.length;\n    const nbFeatures = samples[0].length;\n    const problem = create_svm_nodes(nbSamples, nbFeatures);\n    for (let i = 0; i < nbSamples; i++) {\n      add_instance(problem, new Uint8Array(new Float64Array(samples[i]).buffer), nbFeatures, labels[i], i);\n    }\n    return problem;\n  }\n\n  return SVM;\n};\n"},"lineCount":315}},"error":null,"hash":"8c7eab3bba9b53dc58cf677e77dc1b0e","cacheData":{"env":{}}}